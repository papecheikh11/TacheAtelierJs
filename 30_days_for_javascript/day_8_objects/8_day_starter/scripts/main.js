// Objet global de fen√™tre
// Sans utiliser console.log(), ouvrez votre navigateur et v√©rifiez, vous verrez la valeur de a et b si vous √©crivez a ou b sur le navigateur. Cela signifie que a et b sont d√©j√† disponibles dans la fen√™tre.
//scope.js

a = 'JavaScript' // declaring a variable without let or const make it available in window object and this found anywhere
b = 10 // this is a global scope variable and found in the window object
function letsLearnScope() {
  console.log(a, b)
  if (true) {
    console.log(a, b)
  }
}
console.log(a, b) // accessible

// Port√©e mondiale
// Une variable d√©clar√©e globalement est accessible partout dans le m√™me fichier. Mais le terme mondial est relatif. Il peut √™tre global par rapport au fichier ou par rapport √† un bloc de codes.
//scope.js

 let c = 'JavaScript' // is a global scope it will be found anywhere in this file
 let d = 10 // is a global scope it will be found anywhere in this file
function letsLearnScope() {
  console.log(c, d) // JavaScript 10, accessible
  if (true) {
    let c = 'Python'
    let d = 100
    console.log(c, d) // Python 100
  }
  console.log(c, d)
}
letsLearnScope()
console.log(c, d) // JavaScript 10, accessible

// Port√©e locale
// Une variable d√©clar√©e comme locale n'est accessible que dans certains codes de bloc.

// Port√©e du bloc
// Port√©e de la fonction

//scope.js
let a2 = 'JavaScript' // is a global scope it will be found anywhere in this file
let b2 = 10 // is a global scope it will be found anywhere in this file
// Function scope
function letsLearnScope() {
  // console.log(a1, b1) // JavaScript 10, accessible
  let value = false
// block scope
  if (true) {
    // we can access from the function and outside the function but 
    // variables declared inside the if will not be accessed outside the if block
    let a1 = 'Python'
    let b1 = 20
    let c1 = 30
    let d1 = 40
    value = !value
    console.log(a1, b1, c1, value) // Python 20 30 true
  }
  // we can not access c because c's scope is only the if block
  // console.log(a1, b1, value) // JavaScript 10 true
}
letsLearnScope()
console.log(a2, b2) // JavaScript 10, accessible


// Maintenant, vous avez une compr√©hension de la port√©e. Une variable d√©clar√©e avec var uniquement limit√©e √† la fonction mais la variable d√©clar√©e avec let ou const a la port√©e du bloc (bloc fonctionnel, bloc if, bloc de boucle, etc.). Un bloc en JavaScript est un code entre deux accolades ({}).

//scope.js
function letsLearnScope() {
  var gravity = 9.81
  console.log(gravity)

}
// console.log(gravity), Uncaught ReferenceError: gravity is not defined

if (true){
  var gravity = 9.81
  console.log(gravity) // 9.81
}
console.log(gravity)  // 9.81

for(var i = 0; i < 3; i++){
  console.log(i) // 0, 1, 2
}
console.log(i) // 3


// Dans ES6 et versions ult√©rieures, il y a let et const , vous ne souffrirez donc pas de la sournoiserie de var . Lorsque nous utilisons let, notre variable a une port√©e de bloc et elle n'infectera pas d'autres parties de notre code.

//scope.js
function letsLearnScope1() {
  // you can use let or const, but gravity is constant I prefer to use const
  const gravity = 9.81
  console.log(gravity)

}
// console.log(gravity), Uncaught ReferenceError: gravity is not defined

if (true){
  const  gravity = 9.81
  console.log(gravity) // 9.81
}
// console.log(gravity), Uncaught ReferenceError: gravity is not defined

for(let i = 0; i < 3; i++){
  console.log(i) // 0, 1, 2
}
// console.log(i), Uncaught ReferenceError: i is not defined


// La port√©e let et const sont les m√™mes. La diff√©rence r√©side uniquement dans la r√©affectation. Nous ne pouvons pas modifier ou r√©affecter la valeur de la constvariable. Je vous sugg√®re fortement d'utiliser let et const , en utilisant let et const vous √©crirez du code propre et √©viterez les erreurs difficiles √† d√©boguer. En r√®gle g√©n√©rale, vous pouvez utiliser let pour toute valeur qui change, const pour toute valeur constante et pour un tableau, un objet, une fonction fl√©ch√©e et une expression de fonction.

// üìî Objet
// Tout peut √™tre un objet et les objets ont des propri√©t√©s et les propri√©t√©s ont des valeurs, donc un objet est une paire cl√©-valeur. L'ordre de la cl√© n'est pas r√©serv√©, ou il n'y a pas d'ordre. Pour cr√©er un objet litt√©ral, nous utilisons deux accolades.

// Cr√©er un objet vide
// Un objet vide

const person = {}

// Cr√©er une objection avec des valeurs
// D√©sormais, l‚Äôobjet personne a les propri√©t√©s firstName, lastName, age, location, skills et isMarried. La valeur des propri√©t√©s ou des cl√©s peut √™tre une cha√Æne, un nombre, un bool√©en, un objet, null, und√©fini ou une fonction.

// Voyons quelques exemples d'objet. Chaque cl√© a une valeur dans l'objet.

const rectangle = {
  length: 20,
  width: 20
}
console.log(rectangle) // {length: 20, width: 20}

const person1 = {
  firstName: 'Asabeneh',
  lastName: 'Yetayeh',
  age: 250,
  country: 'Finland',
  city: 'Helsinki',
  skills: [
    'HTML',
    'CSS',
    'JavaScript',
    'React',
    'Node',
    'MongoDB',
    'Python',
    'D3.js'
  ],
  isMarried: true
}
console.log(person1)

// Obtenir les valeurs d'un objet
// Nous pouvons acc√©der aux valeurs de l'objet en utilisant deux m√©thodes :

// en utilisant . suivi du nom de la cl√© si le nom de la cl√© est un seul mot
// en utilisant des crochets et une citation

const person2 = {
  firstName: 'Asabeneh',
  lastName: 'Yetayeh',
  age: 250,
  country: 'Finland',
  city: 'Helsinki',
  skills: [
    'HTML',
    'CSS',
    'JavaScript',
    'React',
    'Node',
    'MongoDB',
    'Python',
    'D3.js'
  ],
  getFullName: function() {
    return `${this.firstName}${this.lastName}`
  },
  'phone number': '+3584545454545'
}

// accessing values using .
console.log(person2.firstName)
console.log(person2.lastName)
console.log(person2.age)
console.log(person2.location) // undefined

// value can be accessed using square bracket and key name
console.log(person2['firstName'])
console.log(person2['lastName'])
console.log(person2['age'])
console.log(person2['age'])
console.log(person2['location']) // undefined

// for instance to access the phone number we only use the square bracket method
console.log(person2['phone number'])

// Cr√©ation de m√©thodes objet
// D√©sormais, l'objet personne a les propri√©t√©s getFullName. Le getFullName est une fonction √† l‚Äôint√©rieur de l‚Äôobjet personne et nous l‚Äôappelons une m√©thode objet. Ce mot cl√© fait r√©f√©rence √† l'objet lui-m√™me. Nous pouvons utiliser le mot this pour acc√©der aux valeurs des diff√©rentes propri√©t√©s de l'objet. Nous ne pouvons pas utiliser une fonction fl√®che comme m√©thode objet car le mot this fait r√©f√©rence √† la fen√™tre √† l'int√©rieur d'une fonction fl√®che au lieu de l'objet lui-m√™me. Exemple d'objet :
const person3 = {
  firstName: 'Asabeneh',
  lastName: 'Yetayeh',
  age: 250,
  country: 'Finland',
  city: 'Helsinki',
  skills: [
    'HTML',
    'CSS',
    'JavaScript',
    'React',
    'Node',
    'MongoDB',
    'Python',
    'D3.js'
  ],
  getFullName: function() {
    return `${this.firstName} ${this.lastName}`
  }
}

console.log(person3.getFullName())
// Asabeneh Yetayeh

// D√©finition d'une nouvelle cl√© pour un objet
// Un objet est une structure de donn√©es mutable et nous pouvons modifier le contenu d'un objet apr√®s sa cr√©ation.

// D√©finir une nouvelle cl√© dans un objet

const person4 = {
  firstName: 'Asabeneh',
  lastName: 'Yetayeh',
  age: 250,
  country: 'Finland',
  city: 'Helsinki',
  skills: [
    'HTML',
    'CSS',
    'JavaScript',
    'React',
    'Node',
    'MongoDB',
    'Python',
    'D3.js'
  ],
  getFullName: function() {
    return `${this.firstName} ${this.lastName}`
  }
}
person4.nationality = 'Ethiopian'
person4.country = 'Finland'
person4.title = 'teacher'
person4.skills.push('Meteor')
person4.skills.push('SasS')
person4.isMarried = true

person4.getPersonInfo = function() {
  let skillsWithoutLastSkill = this.skills
    .splice(0, this.skills.length - 1)
    .join(', ')
  let lastSkill = this.skills.splice(this.skills.length - 1)[0]

  let skills = `${skillsWithoutLastSkill}, and ${lastSkill}`
  let fullName = this.getFullName()
  let statement = `${fullName} is a ${this.title}.\nHe lives in ${this.country}.\nHe teaches ${skills}.`
  return statement
}
console.log(person4)
console.log(person4.getPersonInfo())


// M√©thodes d'objet
// Il existe diff√©rentes m√©thodes pour manipuler un objet. Voyons quelques-unes des m√©thodes disponibles.

// Object.assign : Pour copier un objet sans modifier l'objet d'origine

const person5 = {
  firstName: 'Asabeneh',
  age: 250,
  country: 'Finland',
  city:'Helsinki',
  skills: ['HTML', 'CSS', 'JS'],
  title: 'teacher',
  address: {
    street: 'Heitamienkatu 16',
    pobox: 2002,
    city: 'Helsinki'
  },
  getPersonInfo: function() {
    return `I am ${this.firstName} and I live in ${this.city}, ${this.country}. I am ${this.age}.`
  }
}

//Object methods: Object.assign, Object.keys, Object.values, Object.entries
//hasOwnProperty

const copyPerson = Object.assign({}, person5)
console.log(copyPerson)

// Obtenir les cl√©s d'objet √† l'aide de Object.keys()
// Object.keys : Pour obtenir les cl√©s ou propri√©t√©s d'un objet sous forme de tableau

const keys = Object.keys(copyPerson)
console.log(keys) //['firstName', 'age', 'country','city', 'skills','title', 'address', 'getPersonInfo']
const address = Object.keys(copyPerson.address)
console.log(address) //['street', 'pobox', 'city']

// Obtenir des valeurs d'objet √† l'aide de Object.values()
// Object.values : pour obtenir les valeurs d'un objet sous forme de tableau

const values = Object.values(copyPerson)
console.log(values)

// Obtenir les cl√©s et les valeurs des objets √† l'aide de Object.entries()
// Object.entries : Pour obtenir les cl√©s et les valeurs d'un tableau

const entries = Object.entries(copyPerson)
console.log(entries)

// V√©rification des propri√©t√©s √† l'aide de hasOwnProperty()
// hasOwnProperty : Pour v√©rifier si une cl√© ou une propri√©t√© sp√©cifique existe dans un objet

console.log(copyPerson.hasOwnProperty('name'))
console.log(copyPerson.hasOwnProperty('score'))